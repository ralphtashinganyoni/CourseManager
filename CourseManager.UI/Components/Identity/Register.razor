@page "/register"
@using CourseManager.UI.Identity
@inject IAccountManagement Acct
@layout AuthenticationLayout

<AuthorizeView>
    <Authorized>
        <div class="alert alert-success">You are logged in as @context.User.Identity?.Name.</div>
    </Authorized>
    <NotAuthorized>
        <h1>Register</h1>
        @if (success)
        {
            <div class="alert alert-success">You successfully registered. Now you can <a href="login">login</a>.</div>
        }
        else
        {
            if (errors)
            {
                foreach (var error in errorList)
                {
                    <div class="alert alert-danger">@error</div>
                }
            }
            <div class="flex-outer">

                <div class="form-group">
                    <label class="form-label">Email Address*</label>
                    <input autofocus class="form-control" autocomplete="on" required id="email" name="emailInput" placeholder="Enter your email address" type="email" @bind-value="email" />
                </div>

                <div class="form-group">
                    <label class="form-label">First Name*</label>
                    <input autofocus class="form-control" autocomplete="on" required id="firstName" name="firstNameInput" placeholder="Enter your first name" type="text" @bind-value="firstName" />
                </div>

                <div class="form-group">
                    <label class="form-label">Last Name*</label>
                    <input autofocus class="form-control" autocomplete="on" required id="lastName" name="lastNameInput" placeholder="Enter your last name" type="text" @bind-value="lastName" />
                </div>

                <div class="form-group">
                    <label class="form-label">Phone Number*</label>
                    <input autofocus class="form-control" autocomplete="on" required id="phoneNumber" name="phoneNumberInput" placeholder="Enter your phone number" type="number" @bind-value="phoneNumber" />
                </div>

                <div class="form-group">
                    <label class="form-label">Physical Address</label>
                    <input autofocus class="form-control" autocomplete="on" required id="physicalAddress" name="physicalAddressInput" placeholder="Enter your physical address" type="text" @bind-value="physicalAddress" />
                </div>

                <div class="form-group">
                    <label class="form-label">Password</label>
                    <input required class="form-control" id="password" name="passwordInput" placeholder="Enter your password" type="password" @bind-value="password" /><br />
                </div>

                <div class="form-group">
                    <label class="form-label">Confirm Password</label>
                    <input required class="form-control" id="confirmPassword" name="confirmPasswordInput" placeholder="Re-enter your password" type="password" @bind-value="confirmPassword" />
                </div>

                <div class="form-group mt-3">
                    <button class="btn btn-primary" @onclick="DoRegisterAsync">Register</button>
                </div>
            </div>
        }
    </NotAuthorized>
</AuthorizeView>

@code {
    private bool success, errors;
    private string email = string.Empty;
    private string firstName = string.Empty;
    private string lastName = string.Empty;
    private string phoneNumber = string.Empty;
    private string physicalAddress = string.Empty;
    private string password = string.Empty;
    private string confirmPassword = string.Empty;
    private string[] errorList = [];

    public async Task DoRegisterAsync()
    {
        success = errors = false;
        errorList = [];

        if (string.IsNullOrWhiteSpace(email))
        {
            errors = true;
            errorList = errorList.Append("Email is required.").ToArray();
        }

        if (string.IsNullOrWhiteSpace(firstName))
        {
            errors = true;
            errorList = errorList.Append("First Name is required.").ToArray();
        }

        if (string.IsNullOrWhiteSpace(lastName))
        {
            errors = true;
            errorList = errorList.Append("Last Name is required.").ToArray();
        }

        if (string.IsNullOrWhiteSpace(phoneNumber))
        {
            errors = true;
            errorList = errorList.Append("Phone Number is required.").ToArray();
        }

        if (string.IsNullOrWhiteSpace(physicalAddress))
        {
            errors = true;
            errorList = errorList.Append("Physical Address is required.").ToArray();
        }

        if (string.IsNullOrWhiteSpace(password))
        {
            errors = true;
            errorList = errorList.Append("Password is required.").ToArray();
        }

        if (string.IsNullOrWhiteSpace(confirmPassword))
        {
            errors = true;
            errorList = errorList.Append("Please confirm your password.").ToArray();
        }

        if (password != confirmPassword)
        {
            errors = true;
            errorList = errorList.Append("Passwords don't match.").ToArray();
        }

        if (errors)
        {
            return;
        }

        var result = await Acct.RegisterAsync(email, firstName, lastName, phoneNumber, physicalAddress, password);

        if (result.Succeeded)
        {
            success = true;
            email = firstName = lastName = phoneNumber = physicalAddress = password = confirmPassword = string.Empty;
        }
        else
        {
            errors = true;
            errorList = result.ErrorList;
        }
    }
}